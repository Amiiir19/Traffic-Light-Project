
FWD Traffic Light Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000952  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  00000952  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000952  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000984  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000199d  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a13  00000000  00000000  000024cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d6c  00000000  00000000  00002ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000280  00000000  00000000  00003c4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e4  00000000  00000000  00003ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009be  00000000  00000000  000044b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00004e6e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 95 02 	call	0x52a	; 0x52a <main>
  74:	0c 94 6d 04 	jmp	0x8da	; 0x8da <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <setupMode>:
}

void setupMode(void)
{

	ledInit(PORT_A, 0);
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	81 e4       	ldi	r24, 0x41	; 65
  80:	0e 94 7e 02 	call	0x4fc	; 0x4fc <ledInit>
	ledInit(PORT_A, 1);
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	81 e4       	ldi	r24, 0x41	; 65
  88:	0e 94 7e 02 	call	0x4fc	; 0x4fc <ledInit>
	ledInit(PORT_A, 2);
  8c:	62 e0       	ldi	r22, 0x02	; 2
  8e:	81 e4       	ldi	r24, 0x41	; 65
  90:	0e 94 7e 02 	call	0x4fc	; 0x4fc <ledInit>
	ledInit(PORT_B, 0);
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	82 e4       	ldi	r24, 0x42	; 66
  98:	0e 94 7e 02 	call	0x4fc	; 0x4fc <ledInit>
	ledInit(PORT_B, 1);
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	82 e4       	ldi	r24, 0x42	; 66
  a0:	0e 94 7e 02 	call	0x4fc	; 0x4fc <ledInit>
	ledInit(PORT_B, 2);
  a4:	62 e0       	ldi	r22, 0x02	; 2
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	0e 94 7e 02 	call	0x4fc	; 0x4fc <ledInit>
	buttonInit(PORT_D, 2);
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	84 e4       	ldi	r24, 0x44	; 68
  b0:	0e 94 73 02 	call	0x4e6	; 0x4e6 <buttonInit>
	interruptInit();
  b4:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <interruptInit>
	timerInit();
  b8:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <timerInit>
  bc:	08 95       	ret

000000be <APP_init>:


void APP_init(){
	
	
	if(testMode==1){
  be:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	29 f5       	brne	.+74     	; 0x114 <APP_init+0x56>
		if pressed toggle led
		*/
		
		
		//DIO Driver Function Test
		dioInit(PORT_C,0,OUTPUT);
  ca:	41 e0       	ldi	r20, 0x01	; 1
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	83 e4       	ldi	r24, 0x43	; 67
  d0:	0e 94 9c 02 	call	0x538	; 0x538 <dioInit>
		dioWrite(PORT_C,0,HIGH);
  d4:	41 e0       	ldi	r20, 0x01	; 1
  d6:	60 e0       	ldi	r22, 0x00	; 0
  d8:	83 e4       	ldi	r24, 0x43	; 67
  da:	0e 94 a2 02 	call	0x544	; 0x544 <dioWrite>
		
		//led Driver Function Test
		ledInit(PORT_C,1);
  de:	61 e0       	ldi	r22, 0x01	; 1
  e0:	83 e4       	ldi	r24, 0x43	; 67
  e2:	0e 94 7e 02 	call	0x4fc	; 0x4fc <ledInit>
		ledON(PORT_C,1);
  e6:	61 e0       	ldi	r22, 0x01	; 1
  e8:	83 e4       	ldi	r24, 0x43	; 67
  ea:	0e 94 84 02 	call	0x508	; 0x508 <ledON>

		
		//button Driver Function Test
		buttonInit(PORT_C,2);
  ee:	62 e0       	ldi	r22, 0x02	; 2
  f0:	83 e4       	ldi	r24, 0x43	; 67
  f2:	0e 94 73 02 	call	0x4e6	; 0x4e6 <buttonInit>
		
		// timer test
		timerInit();
  f6:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <timerInit>
		ledON(PORT_C,1);
  fa:	61 e0       	ldi	r22, 0x01	; 1
  fc:	83 e4       	ldi	r24, 0x43	; 67
  fe:	0e 94 84 02 	call	0x508	; 0x508 <ledON>
		timer0Set(2000);
 102:	80 ed       	ldi	r24, 0xD0	; 208
 104:	97 e0       	ldi	r25, 0x07	; 7
 106:	0e 94 2f 04 	call	0x85e	; 0x85e <timer0Set>
		ledOFF(PORT_C,1);
 10a:	61 e0       	ldi	r22, 0x01	; 1
 10c:	83 e4       	ldi	r24, 0x43	; 67
 10e:	0e 94 8a 02 	call	0x514	; 0x514 <ledOFF>
 112:	08 95       	ret
	}
	
	else{
		setupMode();
 114:	0e 94 3e 00 	call	0x7c	; 0x7c <setupMode>
 118:	08 95       	ret

0000011a <pedPass>:
	carPass();
	timer0Set(2000);
}

void pedPass(){
	ledON(PORT_A, 0);
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	81 e4       	ldi	r24, 0x41	; 65
 11e:	0e 94 84 02 	call	0x508	; 0x508 <ledON>
	ledOFF(PORT_A, 1);
 122:	61 e0       	ldi	r22, 0x01	; 1
 124:	81 e4       	ldi	r24, 0x41	; 65
 126:	0e 94 8a 02 	call	0x514	; 0x514 <ledOFF>
	ledOFF(PORT_A, 2);
 12a:	62 e0       	ldi	r22, 0x02	; 2
 12c:	81 e4       	ldi	r24, 0x41	; 65
 12e:	0e 94 8a 02 	call	0x514	; 0x514 <ledOFF>
	ledON(PORT_B, 2);
 132:	62 e0       	ldi	r22, 0x02	; 2
 134:	82 e4       	ldi	r24, 0x42	; 66
 136:	0e 94 84 02 	call	0x508	; 0x508 <ledON>
	ledOFF(PORT_B, 1);
 13a:	61 e0       	ldi	r22, 0x01	; 1
 13c:	82 e4       	ldi	r24, 0x42	; 66
 13e:	0e 94 8a 02 	call	0x514	; 0x514 <ledOFF>
	ledOFF(PORT_B, 0);
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	82 e4       	ldi	r24, 0x42	; 66
 146:	0e 94 8a 02 	call	0x514	; 0x514 <ledOFF>
	trafficState = 1;
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <trafficState+0x1>
 152:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <trafficState>
 156:	08 95       	ret

00000158 <carPass>:
}
void carPass(){
	ledON(PORT_A, 2);
 158:	62 e0       	ldi	r22, 0x02	; 2
 15a:	81 e4       	ldi	r24, 0x41	; 65
 15c:	0e 94 84 02 	call	0x508	; 0x508 <ledON>
	ledOFF(PORT_A, 0);
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	81 e4       	ldi	r24, 0x41	; 65
 164:	0e 94 8a 02 	call	0x514	; 0x514 <ledOFF>
	ledOFF(PORT_A, 1);
 168:	61 e0       	ldi	r22, 0x01	; 1
 16a:	81 e4       	ldi	r24, 0x41	; 65
 16c:	0e 94 8a 02 	call	0x514	; 0x514 <ledOFF>
	ledON(PORT_B, 0);
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	82 e4       	ldi	r24, 0x42	; 66
 174:	0e 94 84 02 	call	0x508	; 0x508 <ledON>
	ledOFF(PORT_B, 1);
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	82 e4       	ldi	r24, 0x42	; 66
 17c:	0e 94 8a 02 	call	0x514	; 0x514 <ledOFF>
	ledOFF(PORT_B, 2);
 180:	62 e0       	ldi	r22, 0x02	; 2
 182:	82 e4       	ldi	r24, 0x42	; 66
 184:	0e 94 8a 02 	call	0x514	; 0x514 <ledOFF>
	trafficState = 3;
 188:	83 e0       	ldi	r24, 0x03	; 3
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <trafficState+0x1>
 190:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <trafficState>
 194:	08 95       	ret

00000196 <yellowBlink>:
}
yellowError yellowBlink(int timernum , int pedorcar){
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
	// 0 means car blink
	// 1 means ped blink
	if (timernum==0){
 19a:	00 97       	sbiw	r24, 0x00	; 0
 19c:	09 f0       	breq	.+2      	; 0x1a0 <yellowBlink+0xa>
 19e:	65 c0       	rjmp	.+202    	; 0x26a <yellowBlink+0xd4>
		if (pedorcar==0){
 1a0:	61 15       	cp	r22, r1
 1a2:	71 05       	cpc	r23, r1
 1a4:	79 f5       	brne	.+94     	; 0x204 <yellowBlink+0x6e>
			trafficState = 2;
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <trafficState+0x1>
 1ae:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <trafficState>
			ledON(PORT_B,0);
 1b2:	60 e0       	ldi	r22, 0x00	; 0
 1b4:	82 e4       	ldi	r24, 0x42	; 66
 1b6:	0e 94 84 02 	call	0x508	; 0x508 <ledON>
			ledOFF(PORT_B,1);
 1ba:	61 e0       	ldi	r22, 0x01	; 1
 1bc:	82 e4       	ldi	r24, 0x42	; 66
 1be:	0e 94 8a 02 	call	0x514	; 0x514 <ledOFF>
			ledOFF(PORT_B,2);
 1c2:	62 e0       	ldi	r22, 0x02	; 2
 1c4:	82 e4       	ldi	r24, 0x42	; 66
 1c6:	0e 94 8a 02 	call	0x514	; 0x514 <ledOFF>
			ledOFF(PORT_A,0);
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	81 e4       	ldi	r24, 0x41	; 65
 1ce:	0e 94 8a 02 	call	0x514	; 0x514 <ledOFF>
			ledOFF(PORT_A,2);
 1d2:	62 e0       	ldi	r22, 0x02	; 2
 1d4:	81 e4       	ldi	r24, 0x41	; 65
 1d6:	0e 94 8a 02 	call	0x514	; 0x514 <ledOFF>
			ledON(PORT_A,1);
 1da:	61 e0       	ldi	r22, 0x01	; 1
 1dc:	81 e4       	ldi	r24, 0x41	; 65
 1de:	0e 94 84 02 	call	0x508	; 0x508 <ledON>
			for(int count=0 ;count<=4;count++ ){
 1e2:	c0 e0       	ldi	r28, 0x00	; 0
 1e4:	d0 e0       	ldi	r29, 0x00	; 0
 1e6:	09 c0       	rjmp	.+18     	; 0x1fa <yellowBlink+0x64>
				timer0Set(0);
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 2f 04 	call	0x85e	; 0x85e <timer0Set>
				ledToggle(PORT_A,1);
 1f0:	61 e0       	ldi	r22, 0x01	; 1
 1f2:	81 e4       	ldi	r24, 0x41	; 65
 1f4:	0e 94 90 02 	call	0x520	; 0x520 <ledToggle>
			ledOFF(PORT_B,1);
			ledOFF(PORT_B,2);
			ledOFF(PORT_A,0);
			ledOFF(PORT_A,2);
			ledON(PORT_A,1);
			for(int count=0 ;count<=4;count++ ){
 1f8:	21 96       	adiw	r28, 0x01	; 1
 1fa:	c5 30       	cpi	r28, 0x05	; 5
 1fc:	d1 05       	cpc	r29, r1
 1fe:	a4 f3       	brlt	.-24     	; 0x1e8 <yellowBlink+0x52>
		}
	}
	else{
		return wrong_timern_number;
	}
	return yellowok;
 200:	82 e0       	ldi	r24, 0x02	; 2
 202:	de c0       	rjmp	.+444    	; 0x3c0 <yellowBlink+0x22a>
			for(int count=0 ;count<=4;count++ ){
				timer0Set(0);
				ledToggle(PORT_A,1);
			}
		}
		else if(pedorcar==1)
 204:	61 30       	cpi	r22, 0x01	; 1
 206:	71 05       	cpc	r23, r1
 208:	09 f0       	breq	.+2      	; 0x20c <yellowBlink+0x76>
 20a:	d5 c0       	rjmp	.+426    	; 0x3b6 <yellowBlink+0x220>
		{
			trafficState = 3;
 20c:	83 e0       	ldi	r24, 0x03	; 3
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <trafficState+0x1>
 214:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <trafficState>
			ledON(PORT_A,2);
 218:	62 e0       	ldi	r22, 0x02	; 2
 21a:	81 e4       	ldi	r24, 0x41	; 65
 21c:	0e 94 84 02 	call	0x508	; 0x508 <ledON>
			ledOFF(PORT_A,1);
 220:	61 e0       	ldi	r22, 0x01	; 1
 222:	81 e4       	ldi	r24, 0x41	; 65
 224:	0e 94 8a 02 	call	0x514	; 0x514 <ledOFF>
			ledOFF(PORT_A,0);
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	81 e4       	ldi	r24, 0x41	; 65
 22c:	0e 94 8a 02 	call	0x514	; 0x514 <ledOFF>
			ledOFF(PORT_B,0);
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	82 e4       	ldi	r24, 0x42	; 66
 234:	0e 94 8a 02 	call	0x514	; 0x514 <ledOFF>
			ledOFF(PORT_B,2);
 238:	62 e0       	ldi	r22, 0x02	; 2
 23a:	82 e4       	ldi	r24, 0x42	; 66
 23c:	0e 94 8a 02 	call	0x514	; 0x514 <ledOFF>
			ledON(PORT_B,1);
 240:	61 e0       	ldi	r22, 0x01	; 1
 242:	82 e4       	ldi	r24, 0x42	; 66
 244:	0e 94 84 02 	call	0x508	; 0x508 <ledON>
			for(int count=0 ;count<=4;count++ ){
 248:	c0 e0       	ldi	r28, 0x00	; 0
 24a:	d0 e0       	ldi	r29, 0x00	; 0
 24c:	09 c0       	rjmp	.+18     	; 0x260 <yellowBlink+0xca>
				timer0Set(0);
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 2f 04 	call	0x85e	; 0x85e <timer0Set>
				ledToggle(PORT_B,1);
 256:	61 e0       	ldi	r22, 0x01	; 1
 258:	82 e4       	ldi	r24, 0x42	; 66
 25a:	0e 94 90 02 	call	0x520	; 0x520 <ledToggle>
			ledOFF(PORT_A,1);
			ledOFF(PORT_A,0);
			ledOFF(PORT_B,0);
			ledOFF(PORT_B,2);
			ledON(PORT_B,1);
			for(int count=0 ;count<=4;count++ ){
 25e:	21 96       	adiw	r28, 0x01	; 1
 260:	c5 30       	cpi	r28, 0x05	; 5
 262:	d1 05       	cpc	r29, r1
 264:	a4 f3       	brlt	.-24     	; 0x24e <yellowBlink+0xb8>
		}
	}
	else{
		return wrong_timern_number;
	}
	return yellowok;
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	ab c0       	rjmp	.+342    	; 0x3c0 <yellowBlink+0x22a>
		}
		else{
			return wrong_mode_choice;
		}
	}
	else if(timernum==1){
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	09 f0       	breq	.+2      	; 0x270 <yellowBlink+0xda>
 26e:	a5 c0       	rjmp	.+330    	; 0x3ba <yellowBlink+0x224>
		if (pedorcar==0){
 270:	61 15       	cp	r22, r1
 272:	71 05       	cpc	r23, r1
 274:	79 f5       	brne	.+94     	; 0x2d4 <yellowBlink+0x13e>
			trafficState = 2;
 276:	82 e0       	ldi	r24, 0x02	; 2
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <trafficState+0x1>
 27e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <trafficState>
			ledON(PORT_B,0);
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	82 e4       	ldi	r24, 0x42	; 66
 286:	0e 94 84 02 	call	0x508	; 0x508 <ledON>
			ledOFF(PORT_B,1);
 28a:	61 e0       	ldi	r22, 0x01	; 1
 28c:	82 e4       	ldi	r24, 0x42	; 66
 28e:	0e 94 8a 02 	call	0x514	; 0x514 <ledOFF>
			ledOFF(PORT_B,2);
 292:	62 e0       	ldi	r22, 0x02	; 2
 294:	82 e4       	ldi	r24, 0x42	; 66
 296:	0e 94 8a 02 	call	0x514	; 0x514 <ledOFF>
			ledOFF(PORT_A,0);
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	81 e4       	ldi	r24, 0x41	; 65
 29e:	0e 94 8a 02 	call	0x514	; 0x514 <ledOFF>
			ledOFF(PORT_A,2);
 2a2:	62 e0       	ldi	r22, 0x02	; 2
 2a4:	81 e4       	ldi	r24, 0x41	; 65
 2a6:	0e 94 8a 02 	call	0x514	; 0x514 <ledOFF>
			ledON(PORT_A,1);
 2aa:	61 e0       	ldi	r22, 0x01	; 1
 2ac:	81 e4       	ldi	r24, 0x41	; 65
 2ae:	0e 94 84 02 	call	0x508	; 0x508 <ledON>
			for(int count=0 ;count<=10;count++ ){
 2b2:	c0 e0       	ldi	r28, 0x00	; 0
 2b4:	d0 e0       	ldi	r29, 0x00	; 0
 2b6:	09 c0       	rjmp	.+18     	; 0x2ca <yellowBlink+0x134>
				timer1Set(1);
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 47 04 	call	0x88e	; 0x88e <timer1Set>
				ledToggle(PORT_A,1);
 2c0:	61 e0       	ldi	r22, 0x01	; 1
 2c2:	81 e4       	ldi	r24, 0x41	; 65
 2c4:	0e 94 90 02 	call	0x520	; 0x520 <ledToggle>
			ledOFF(PORT_B,1);
			ledOFF(PORT_B,2);
			ledOFF(PORT_A,0);
			ledOFF(PORT_A,2);
			ledON(PORT_A,1);
			for(int count=0 ;count<=10;count++ ){
 2c8:	21 96       	adiw	r28, 0x01	; 1
 2ca:	cb 30       	cpi	r28, 0x0B	; 11
 2cc:	d1 05       	cpc	r29, r1
 2ce:	a4 f3       	brlt	.-24     	; 0x2b8 <yellowBlink+0x122>
		}
	}
	else{
		return wrong_timern_number;
	}
	return yellowok;
 2d0:	82 e0       	ldi	r24, 0x02	; 2
 2d2:	76 c0       	rjmp	.+236    	; 0x3c0 <yellowBlink+0x22a>
			for(int count=0 ;count<=10;count++ ){
				timer1Set(1);
				ledToggle(PORT_A,1);
			}
		}
		else if(pedorcar==1)
 2d4:	61 30       	cpi	r22, 0x01	; 1
 2d6:	71 05       	cpc	r23, r1
 2d8:	79 f5       	brne	.+94     	; 0x338 <yellowBlink+0x1a2>
		{
			trafficState = 3;
 2da:	83 e0       	ldi	r24, 0x03	; 3
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <trafficState+0x1>
 2e2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <trafficState>
			ledON(PORT_A,2);
 2e6:	62 e0       	ldi	r22, 0x02	; 2
 2e8:	81 e4       	ldi	r24, 0x41	; 65
 2ea:	0e 94 84 02 	call	0x508	; 0x508 <ledON>
			ledOFF(PORT_A,1);
 2ee:	61 e0       	ldi	r22, 0x01	; 1
 2f0:	81 e4       	ldi	r24, 0x41	; 65
 2f2:	0e 94 8a 02 	call	0x514	; 0x514 <ledOFF>
			ledOFF(PORT_A,0);
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	81 e4       	ldi	r24, 0x41	; 65
 2fa:	0e 94 8a 02 	call	0x514	; 0x514 <ledOFF>
			ledOFF(PORT_B,0);
 2fe:	60 e0       	ldi	r22, 0x00	; 0
 300:	82 e4       	ldi	r24, 0x42	; 66
 302:	0e 94 8a 02 	call	0x514	; 0x514 <ledOFF>
			ledOFF(PORT_B,2);
 306:	62 e0       	ldi	r22, 0x02	; 2
 308:	82 e4       	ldi	r24, 0x42	; 66
 30a:	0e 94 8a 02 	call	0x514	; 0x514 <ledOFF>
			ledON(PORT_B,1);
 30e:	61 e0       	ldi	r22, 0x01	; 1
 310:	82 e4       	ldi	r24, 0x42	; 66
 312:	0e 94 84 02 	call	0x508	; 0x508 <ledON>
			for(int count=0 ;count<=10;count++ ){
 316:	c0 e0       	ldi	r28, 0x00	; 0
 318:	d0 e0       	ldi	r29, 0x00	; 0
 31a:	09 c0       	rjmp	.+18     	; 0x32e <yellowBlink+0x198>
				timer1Set(1);
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 47 04 	call	0x88e	; 0x88e <timer1Set>
				ledToggle(PORT_B,1);
 324:	61 e0       	ldi	r22, 0x01	; 1
 326:	82 e4       	ldi	r24, 0x42	; 66
 328:	0e 94 90 02 	call	0x520	; 0x520 <ledToggle>
			ledOFF(PORT_A,1);
			ledOFF(PORT_A,0);
			ledOFF(PORT_B,0);
			ledOFF(PORT_B,2);
			ledON(PORT_B,1);
			for(int count=0 ;count<=10;count++ ){
 32c:	21 96       	adiw	r28, 0x01	; 1
 32e:	cb 30       	cpi	r28, 0x0B	; 11
 330:	d1 05       	cpc	r29, r1
 332:	a4 f3       	brlt	.-24     	; 0x31c <yellowBlink+0x186>
		}
	}
	else{
		return wrong_timern_number;
	}
	return yellowok;
 334:	82 e0       	ldi	r24, 0x02	; 2
 336:	44 c0       	rjmp	.+136    	; 0x3c0 <yellowBlink+0x22a>
			for(int count=0 ;count<=10;count++ ){
				timer1Set(1);
				ledToggle(PORT_B,1);
			}
		}
		else if(pedorcar==2)
 338:	62 30       	cpi	r22, 0x02	; 2
 33a:	71 05       	cpc	r23, r1
 33c:	09 f0       	breq	.+2      	; 0x340 <yellowBlink+0x1aa>
 33e:	3f c0       	rjmp	.+126    	; 0x3be <yellowBlink+0x228>
		{
			trafficState = 3;
 340:	83 e0       	ldi	r24, 0x03	; 3
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <trafficState+0x1>
 348:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <trafficState>
			ledON(PORT_A,1);
 34c:	61 e0       	ldi	r22, 0x01	; 1
 34e:	81 e4       	ldi	r24, 0x41	; 65
 350:	0e 94 84 02 	call	0x508	; 0x508 <ledON>
			ledOFF(PORT_A,2);
 354:	62 e0       	ldi	r22, 0x02	; 2
 356:	81 e4       	ldi	r24, 0x41	; 65
 358:	0e 94 8a 02 	call	0x514	; 0x514 <ledOFF>
			ledOFF(PORT_A,0);
 35c:	60 e0       	ldi	r22, 0x00	; 0
 35e:	81 e4       	ldi	r24, 0x41	; 65
 360:	0e 94 8a 02 	call	0x514	; 0x514 <ledOFF>
			ledOFF(PORT_B,0);
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	82 e4       	ldi	r24, 0x42	; 66
 368:	0e 94 8a 02 	call	0x514	; 0x514 <ledOFF>
			ledOFF(PORT_B,2);
 36c:	62 e0       	ldi	r22, 0x02	; 2
 36e:	82 e4       	ldi	r24, 0x42	; 66
 370:	0e 94 8a 02 	call	0x514	; 0x514 <ledOFF>
			ledON(PORT_B,1);
 374:	61 e0       	ldi	r22, 0x01	; 1
 376:	82 e4       	ldi	r24, 0x42	; 66
 378:	0e 94 84 02 	call	0x508	; 0x508 <ledON>
			for(int count=0 ;count<=10;count++ ){
 37c:	c0 e0       	ldi	r28, 0x00	; 0
 37e:	d0 e0       	ldi	r29, 0x00	; 0
 380:	0d c0       	rjmp	.+26     	; 0x39c <yellowBlink+0x206>
				timer1Set(1);
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 47 04 	call	0x88e	; 0x88e <timer1Set>
				ledToggle(PORT_B,1);
 38a:	61 e0       	ldi	r22, 0x01	; 1
 38c:	82 e4       	ldi	r24, 0x42	; 66
 38e:	0e 94 90 02 	call	0x520	; 0x520 <ledToggle>
				ledToggle(PORT_A,1);
 392:	61 e0       	ldi	r22, 0x01	; 1
 394:	81 e4       	ldi	r24, 0x41	; 65
 396:	0e 94 90 02 	call	0x520	; 0x520 <ledToggle>
			ledOFF(PORT_A,2);
			ledOFF(PORT_A,0);
			ledOFF(PORT_B,0);
			ledOFF(PORT_B,2);
			ledON(PORT_B,1);
			for(int count=0 ;count<=10;count++ ){
 39a:	21 96       	adiw	r28, 0x01	; 1
 39c:	cb 30       	cpi	r28, 0x0B	; 11
 39e:	d1 05       	cpc	r29, r1
 3a0:	84 f3       	brlt	.-32     	; 0x382 <yellowBlink+0x1ec>
				timer1Set(1);
				ledToggle(PORT_B,1);
				ledToggle(PORT_A,1);
			}
			ledOFF(PORT_A,1);
 3a2:	61 e0       	ldi	r22, 0x01	; 1
 3a4:	81 e4       	ldi	r24, 0x41	; 65
 3a6:	0e 94 8a 02 	call	0x514	; 0x514 <ledOFF>
			ledOFF(PORT_B,1);
 3aa:	61 e0       	ldi	r22, 0x01	; 1
 3ac:	82 e4       	ldi	r24, 0x42	; 66
 3ae:	0e 94 8a 02 	call	0x514	; 0x514 <ledOFF>
		}
	}
	else{
		return wrong_timern_number;
	}
	return yellowok;
 3b2:	82 e0       	ldi	r24, 0x02	; 2
 3b4:	05 c0       	rjmp	.+10     	; 0x3c0 <yellowBlink+0x22a>
				timer0Set(0);
				ledToggle(PORT_B,1);
			}
		}
		else{
			return wrong_mode_choice;
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	03 c0       	rjmp	.+6      	; 0x3c0 <yellowBlink+0x22a>
		else{
			return wrong_mode_choice;
		}
	}
	else{
		return wrong_timern_number;
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	01 c0       	rjmp	.+2      	; 0x3c0 <yellowBlink+0x22a>
			ledOFF(PORT_A,1);
			ledOFF(PORT_B,1);
			
		}
		else{
			return wrong_mode_choice;
 3be:	81 e0       	ldi	r24, 0x01	; 1
	}
	else{
		return wrong_timern_number;
	}
	return yellowok;
 3c0:	df 91       	pop	r29
 3c2:	cf 91       	pop	r28
 3c4:	08 95       	ret

000003c6 <__vector_1>:

unsigned char buttonState = 0;
int trafficState = 0;
int testMode=0;

ISR (EXT_INT_0){
 3c6:	1f 92       	push	r1
 3c8:	0f 92       	push	r0
 3ca:	0f b6       	in	r0, 0x3f	; 63
 3cc:	0f 92       	push	r0
 3ce:	11 24       	eor	r1, r1
 3d0:	2f 93       	push	r18
 3d2:	3f 93       	push	r19
 3d4:	4f 93       	push	r20
 3d6:	5f 93       	push	r21
 3d8:	6f 93       	push	r22
 3da:	7f 93       	push	r23
 3dc:	8f 93       	push	r24
 3de:	9f 93       	push	r25
 3e0:	af 93       	push	r26
 3e2:	bf 93       	push	r27
 3e4:	ef 93       	push	r30
 3e6:	ff 93       	push	r31
	
	//disable interrupt TO AVOID LONG PRESS AND DOUBLE PRESS
	clrBit(GICR,6);
 3e8:	8b b7       	in	r24, 0x3b	; 59
 3ea:	8f 7b       	andi	r24, 0xBF	; 191
 3ec:	8b bf       	out	0x3b, r24	; 59
	// The ISR Function
	/* Here we check the last state of the car leds to know in which behavior will we act with the interrupt*/

	switch(trafficState){
 3ee:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <trafficState>
 3f2:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <trafficState+0x1>
 3f6:	82 30       	cpi	r24, 0x02	; 2
 3f8:	91 05       	cpc	r25, r1
 3fa:	19 f0       	breq	.+6      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3fc:	03 97       	sbiw	r24, 0x03	; 3
 3fe:	a1 f0       	breq	.+40     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 400:	27 c0       	rjmp	.+78     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
		break;
		case 2 :
		// Yellow Blinking both yellow leds and the timer is inside the function
		// we pass a Variable of 1 to the function that will make the function use timer1 not 0
		
		yellowBlink(1,2);
 402:	62 e0       	ldi	r22, 0x02	; 2
 404:	70 e0       	ldi	r23, 0x00	; 0
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	0e 94 cb 00 	call	0x196	; 0x196 <yellowBlink>
		pedPass();
 40e:	0e 94 8d 00 	call	0x11a	; 0x11a <pedPass>
		timer1Set(0);
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	0e 94 47 04 	call	0x88e	; 0x88e <timer1Set>
		yellowBlink(1,0);
 41a:	60 e0       	ldi	r22, 0x00	; 0
 41c:	70 e0       	ldi	r23, 0x00	; 0
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 cb 00 	call	0x196	; 0x196 <yellowBlink>
		break;
 426:	14 c0       	rjmp	.+40     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
		case 3 :
		yellowBlink(1,1);
 428:	61 e0       	ldi	r22, 0x01	; 1
 42a:	70 e0       	ldi	r23, 0x00	; 0
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 cb 00 	call	0x196	; 0x196 <yellowBlink>
		pedPass();
 434:	0e 94 8d 00 	call	0x11a	; 0x11a <pedPass>
		timer1Set(0);
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0e 94 47 04 	call	0x88e	; 0x88e <timer1Set>
		yellowBlink(1,0);
 440:	60 e0       	ldi	r22, 0x00	; 0
 442:	70 e0       	ldi	r23, 0x00	; 0
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	0e 94 cb 00 	call	0x196	; 0x196 <yellowBlink>
		carPass();
 44c:	0e 94 ac 00 	call	0x158	; 0x158 <carPass>
		break;
	}

	//enable interrupt AGAIN
	interruptInit();
 450:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <interruptInit>
	setBit(GIFR,6);
 454:	8a b7       	in	r24, 0x3a	; 58
 456:	80 64       	ori	r24, 0x40	; 64
 458:	8a bf       	out	0x3a, r24	; 58
}
 45a:	ff 91       	pop	r31
 45c:	ef 91       	pop	r30
 45e:	bf 91       	pop	r27
 460:	af 91       	pop	r26
 462:	9f 91       	pop	r25
 464:	8f 91       	pop	r24
 466:	7f 91       	pop	r23
 468:	6f 91       	pop	r22
 46a:	5f 91       	pop	r21
 46c:	4f 91       	pop	r20
 46e:	3f 91       	pop	r19
 470:	2f 91       	pop	r18
 472:	0f 90       	pop	r0
 474:	0f be       	out	0x3f, r0	; 63
 476:	0f 90       	pop	r0
 478:	1f 90       	pop	r1
 47a:	18 95       	reti

0000047c <normalMode>:

}

void normalMode(void)
{
	pedPass();
 47c:	0e 94 8d 00 	call	0x11a	; 0x11a <pedPass>
	timer0Set(2000);
 480:	80 ed       	ldi	r24, 0xD0	; 208
 482:	97 e0       	ldi	r25, 0x07	; 7
 484:	0e 94 2f 04 	call	0x85e	; 0x85e <timer0Set>
	yellowBlink(0,0); // yellowblink(used timer 0 for normal 1 for interrupt , which yellow led will blink 0 car)
 488:	60 e0       	ldi	r22, 0x00	; 0
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0e 94 cb 00 	call	0x196	; 0x196 <yellowBlink>
	carPass();
 494:	0e 94 ac 00 	call	0x158	; 0x158 <carPass>
	timer0Set(2000);
 498:	80 ed       	ldi	r24, 0xD0	; 208
 49a:	97 e0       	ldi	r25, 0x07	; 7
 49c:	0e 94 2f 04 	call	0x85e	; 0x85e <timer0Set>
 4a0:	08 95       	ret

000004a2 <APP_start>:
	setBit(GIFR,6);
}



void APP_start (){
 4a2:	cf 93       	push	r28
 4a4:	df 93       	push	r29
 4a6:	1f 92       	push	r1
 4a8:	cd b7       	in	r28, 0x3d	; 61
 4aa:	de b7       	in	r29, 0x3e	; 62
	while (1)
	{
		if (testMode==1){
 4ac:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4b0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 4b4:	01 97       	sbiw	r24, 0x01	; 1
 4b6:	a1 f4       	brne	.+40     	; 0x4e0 <APP_start+0x3e>
			timer1Set(1);
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	0e 94 47 04 	call	0x88e	; 0x88e <timer1Set>
			// Button Driver Function Test
			unsigned char x=0;
 4c0:	19 82       	std	Y+1, r1	; 0x01
			buttonRead(PORT_C,2,&x);
 4c2:	ae 01       	movw	r20, r28
 4c4:	4f 5f       	subi	r20, 0xFF	; 255
 4c6:	5f 4f       	sbci	r21, 0xFF	; 255
 4c8:	62 e0       	ldi	r22, 0x02	; 2
 4ca:	83 e4       	ldi	r24, 0x43	; 67
 4cc:	0e 94 79 02 	call	0x4f2	; 0x4f2 <buttonRead>
			if(	x==1){
 4d0:	89 81       	ldd	r24, Y+1	; 0x01
 4d2:	81 30       	cpi	r24, 0x01	; 1
 4d4:	59 f7       	brne	.-42     	; 0x4ac <APP_start+0xa>

					//led toggle function test
				ledToggle(PORT_C,1);
 4d6:	61 e0       	ldi	r22, 0x01	; 1
 4d8:	83 e4       	ldi	r24, 0x43	; 67
 4da:	0e 94 90 02 	call	0x520	; 0x520 <ledToggle>
 4de:	e6 cf       	rjmp	.-52     	; 0x4ac <APP_start+0xa>
			}
		}
		else{
			normalMode();
 4e0:	0e 94 3e 02 	call	0x47c	; 0x47c <normalMode>
 4e4:	e3 cf       	rjmp	.-58     	; 0x4ac <APP_start+0xa>

000004e6 <buttonInit>:
#include "../../HAL/Button Driver/button.h"
#include "../../HAL/LED driver/led.h"
#include "button.h"
EN_DIO_error_t errorbutton;
EN_DIO_error_t buttonInit(unsigned char buttonPort, unsigned char buttonPin ){
	errorbutton=dioInit(buttonPort,buttonPin,INPUT);
 4e6:	40 e0       	ldi	r20, 0x00	; 0
 4e8:	0e 94 9c 02 	call	0x538	; 0x538 <dioInit>
 4ec:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <errorbutton>
	return errorbutton;
}
 4f0:	08 95       	ret

000004f2 <buttonRead>:
EN_DIO_error_t buttonRead(unsigned char buttonPort, unsigned char buttonPin , unsigned char *value){
	errorbutton=dioRead(buttonPort,buttonPin,value);
 4f2:	0e 94 73 03 	call	0x6e6	; 0x6e6 <dioRead>
 4f6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <errorbutton>
	return errorbutton;
 4fa:	08 95       	ret

000004fc <ledInit>:
#include "../../HAL/Button Driver/button.h"
#include "../../HAL/LED driver/led.h"
#include "led.h"
EN_DIO_error_t errorpan;
EN_DIO_error_t ledInit(unsigned char ledPort ,unsigned char ledPin){
	errorpan=dioInit(ledPort,ledPin,OUTPUT);
 4fc:	41 e0       	ldi	r20, 0x01	; 1
 4fe:	0e 94 9c 02 	call	0x538	; 0x538 <dioInit>
 502:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <errorpan>
	return errorpan;
}
 506:	08 95       	ret

00000508 <ledON>:
EN_DIO_error_t ledON(unsigned char ledPort ,unsigned char ledPin){
	
	errorpan=dioWrite(ledPort,ledPin,HIGH);
 508:	41 e0       	ldi	r20, 0x01	; 1
 50a:	0e 94 a2 02 	call	0x544	; 0x544 <dioWrite>
 50e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <errorpan>
	return errorpan;

}
 512:	08 95       	ret

00000514 <ledOFF>:
EN_DIO_error_t ledOFF(unsigned char ledPort ,unsigned char ledPin){
	errorpan=dioWrite(ledPort,ledPin,LOW);
 514:	40 e0       	ldi	r20, 0x00	; 0
 516:	0e 94 a2 02 	call	0x544	; 0x544 <dioWrite>
 51a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <errorpan>
	return errorpan;

}
 51e:	08 95       	ret

00000520 <ledToggle>:
EN_DIO_error_t ledToggle(unsigned char ledPort ,unsigned char ledPin){
	errorpan=dioToggle(ledPort,ledPin);
 520:	0e 94 32 03 	call	0x664	; 0x664 <dioToggle>
 524:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <errorpan>
	return errorpan;
}
 528:	08 95       	ret

0000052a <main>:

#include "APPLICATION/application.h"

int main(void)
{
	APP_init();
 52a:	0e 94 5f 00 	call	0xbe	; 0xbe <APP_init>
	APP_start();
 52e:	0e 94 51 02 	call	0x4a2	; 0x4a2 <APP_start>
}
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	08 95       	ret

00000538 <dioInit>:


EN_DIO_error_t  dioInit( unsigned char portNum ,unsigned char pinNum, unsigned char direction){
	
	
	if (pinNum>7){
 538:	68 30       	cpi	r22, 0x08	; 8
 53a:	10 f0       	brcs	.+4      	; 0x540 <dioInit+0x8>
		return DIO_WRONG_PIN_NUMBER;
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	08 95       	ret
	}
	if(direction != OUTPUT || direction != INPUT){
		return DIO_WRONG_DIRECTION;
 540:	82 e0       	ldi	r24, 0x02	; 2
		break;
			default:
			return DIO_WRONG_PORT_NUMBER;
	}
	return DIO_OK;
}
 542:	08 95       	ret

00000544 <dioWrite>:

EN_DIO_error_t  dioWrite( unsigned char portNum ,unsigned char pinNum, unsigned char value){
	
	if (pinNum>7){
 544:	68 30       	cpi	r22, 0x08	; 8
 546:	08 f0       	brcs	.+2      	; 0x54a <dioWrite+0x6>
 548:	81 c0       	rjmp	.+258    	; 0x64c <dioWrite+0x108>
		return DIO_WRONG_PIN_NUMBER;
	}
	
	switch(portNum){
 54a:	82 34       	cpi	r24, 0x42	; 66
 54c:	41 f1       	breq	.+80     	; 0x59e <dioWrite+0x5a>
 54e:	18 f4       	brcc	.+6      	; 0x556 <dioWrite+0x12>
 550:	81 34       	cpi	r24, 0x41	; 65
 552:	41 f0       	breq	.+16     	; 0x564 <dioWrite+0x20>
 554:	7d c0       	rjmp	.+250    	; 0x650 <dioWrite+0x10c>
 556:	83 34       	cpi	r24, 0x43	; 67
 558:	09 f4       	brne	.+2      	; 0x55c <dioWrite+0x18>
 55a:	3e c0       	rjmp	.+124    	; 0x5d8 <dioWrite+0x94>
 55c:	84 34       	cpi	r24, 0x44	; 68
 55e:	09 f4       	brne	.+2      	; 0x562 <dioWrite+0x1e>
 560:	58 c0       	rjmp	.+176    	; 0x612 <dioWrite+0xce>
 562:	76 c0       	rjmp	.+236    	; 0x650 <dioWrite+0x10c>
		case PORT_A :
		if(value==HIGH){
 564:	41 30       	cpi	r20, 0x01	; 1
 566:	61 f4       	brne	.+24     	; 0x580 <dioWrite+0x3c>
			setBit(PORTA,pinNum);
 568:	2b b3       	in	r18, 0x1b	; 27
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	02 c0       	rjmp	.+4      	; 0x574 <dioWrite+0x30>
 570:	88 0f       	add	r24, r24
 572:	99 1f       	adc	r25, r25
 574:	6a 95       	dec	r22
 576:	e2 f7       	brpl	.-8      	; 0x570 <dioWrite+0x2c>
 578:	82 2b       	or	r24, r18
 57a:	8b bb       	out	0x1b, r24	; 27
		}
		break;
			default:
			return DIO_WRONG_PORT_NUMBER;
	}
	return DIO_OK;
 57c:	83 e0       	ldi	r24, 0x03	; 3
 57e:	08 95       	ret
		case PORT_A :
		if(value==HIGH){
			setBit(PORTA,pinNum);

		}
		else if(value ==LOW){
 580:	41 11       	cpse	r20, r1
 582:	68 c0       	rjmp	.+208    	; 0x654 <dioWrite+0x110>
			clrBit(PORTA,pinNum);
 584:	2b b3       	in	r18, 0x1b	; 27
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	02 c0       	rjmp	.+4      	; 0x590 <dioWrite+0x4c>
 58c:	88 0f       	add	r24, r24
 58e:	99 1f       	adc	r25, r25
 590:	6a 95       	dec	r22
 592:	e2 f7       	brpl	.-8      	; 0x58c <dioWrite+0x48>
 594:	80 95       	com	r24
 596:	82 23       	and	r24, r18
 598:	8b bb       	out	0x1b, r24	; 27
		}
		break;
			default:
			return DIO_WRONG_PORT_NUMBER;
	}
	return DIO_OK;
 59a:	83 e0       	ldi	r24, 0x03	; 3
 59c:	08 95       	ret
			clrBit(PORTA,pinNum);

		}
		break;
		case PORT_B :
		if(value==HIGH){
 59e:	41 30       	cpi	r20, 0x01	; 1
 5a0:	61 f4       	brne	.+24     	; 0x5ba <dioWrite+0x76>
			setBit(PORTB,pinNum);
 5a2:	28 b3       	in	r18, 0x18	; 24
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <dioWrite+0x6a>
 5aa:	88 0f       	add	r24, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	6a 95       	dec	r22
 5b0:	e2 f7       	brpl	.-8      	; 0x5aa <dioWrite+0x66>
 5b2:	82 2b       	or	r24, r18
 5b4:	88 bb       	out	0x18, r24	; 24
		}
		break;
			default:
			return DIO_WRONG_PORT_NUMBER;
	}
	return DIO_OK;
 5b6:	83 e0       	ldi	r24, 0x03	; 3
 5b8:	08 95       	ret
		break;
		case PORT_B :
		if(value==HIGH){
			setBit(PORTB,pinNum);
		}
		else if(value ==LOW){
 5ba:	41 11       	cpse	r20, r1
 5bc:	4d c0       	rjmp	.+154    	; 0x658 <dioWrite+0x114>
			clrBit(PORTB,pinNum);
 5be:	28 b3       	in	r18, 0x18	; 24
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <dioWrite+0x86>
 5c6:	88 0f       	add	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	6a 95       	dec	r22
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <dioWrite+0x82>
 5ce:	80 95       	com	r24
 5d0:	82 23       	and	r24, r18
 5d2:	88 bb       	out	0x18, r24	; 24
		}
		break;
			default:
			return DIO_WRONG_PORT_NUMBER;
	}
	return DIO_OK;
 5d4:	83 e0       	ldi	r24, 0x03	; 3
 5d6:	08 95       	ret
		else if(value ==LOW){
			clrBit(PORTB,pinNum);
		}
		break;
		case PORT_C :
		if(value==HIGH){
 5d8:	41 30       	cpi	r20, 0x01	; 1
 5da:	61 f4       	brne	.+24     	; 0x5f4 <dioWrite+0xb0>
			setBit(PORTC,pinNum);
 5dc:	25 b3       	in	r18, 0x15	; 21
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <dioWrite+0xa4>
 5e4:	88 0f       	add	r24, r24
 5e6:	99 1f       	adc	r25, r25
 5e8:	6a 95       	dec	r22
 5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <dioWrite+0xa0>
 5ec:	82 2b       	or	r24, r18
 5ee:	85 bb       	out	0x15, r24	; 21
		}
		break;
			default:
			return DIO_WRONG_PORT_NUMBER;
	}
	return DIO_OK;
 5f0:	83 e0       	ldi	r24, 0x03	; 3
 5f2:	08 95       	ret
		break;
		case PORT_C :
		if(value==HIGH){
			setBit(PORTC,pinNum);
		}
		else if(value ==LOW){
 5f4:	41 11       	cpse	r20, r1
 5f6:	32 c0       	rjmp	.+100    	; 0x65c <dioWrite+0x118>
			clrBit(PORTC,pinNum);
 5f8:	25 b3       	in	r18, 0x15	; 21
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <dioWrite+0xc0>
 600:	88 0f       	add	r24, r24
 602:	99 1f       	adc	r25, r25
 604:	6a 95       	dec	r22
 606:	e2 f7       	brpl	.-8      	; 0x600 <dioWrite+0xbc>
 608:	80 95       	com	r24
 60a:	82 23       	and	r24, r18
 60c:	85 bb       	out	0x15, r24	; 21
		}
		break;
			default:
			return DIO_WRONG_PORT_NUMBER;
	}
	return DIO_OK;
 60e:	83 e0       	ldi	r24, 0x03	; 3
 610:	08 95       	ret
		else if(value ==LOW){
			clrBit(PORTC,pinNum);
		}
		break;
		case PORT_D :
		if(value==HIGH){
 612:	41 30       	cpi	r20, 0x01	; 1
 614:	61 f4       	brne	.+24     	; 0x62e <dioWrite+0xea>
			setBit(PORTD,pinNum);
 616:	22 b3       	in	r18, 0x12	; 18
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	02 c0       	rjmp	.+4      	; 0x622 <dioWrite+0xde>
 61e:	88 0f       	add	r24, r24
 620:	99 1f       	adc	r25, r25
 622:	6a 95       	dec	r22
 624:	e2 f7       	brpl	.-8      	; 0x61e <dioWrite+0xda>
 626:	82 2b       	or	r24, r18
 628:	82 bb       	out	0x12, r24	; 18
		}
		break;
			default:
			return DIO_WRONG_PORT_NUMBER;
	}
	return DIO_OK;
 62a:	83 e0       	ldi	r24, 0x03	; 3
 62c:	08 95       	ret
		break;
		case PORT_D :
		if(value==HIGH){
			setBit(PORTD,pinNum);
		}
		else if(value ==LOW){
 62e:	41 11       	cpse	r20, r1
 630:	17 c0       	rjmp	.+46     	; 0x660 <dioWrite+0x11c>
			clrBit(PORTD,pinNum);
 632:	22 b3       	in	r18, 0x12	; 18
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	02 c0       	rjmp	.+4      	; 0x63e <dioWrite+0xfa>
 63a:	88 0f       	add	r24, r24
 63c:	99 1f       	adc	r25, r25
 63e:	6a 95       	dec	r22
 640:	e2 f7       	brpl	.-8      	; 0x63a <dioWrite+0xf6>
 642:	80 95       	com	r24
 644:	82 23       	and	r24, r18
 646:	82 bb       	out	0x12, r24	; 18
		}
		break;
			default:
			return DIO_WRONG_PORT_NUMBER;
	}
	return DIO_OK;
 648:	83 e0       	ldi	r24, 0x03	; 3
 64a:	08 95       	ret
}

EN_DIO_error_t  dioWrite( unsigned char portNum ,unsigned char pinNum, unsigned char value){
	
	if (pinNum>7){
		return DIO_WRONG_PIN_NUMBER;
 64c:	80 e0       	ldi	r24, 0x00	; 0
 64e:	08 95       	ret
		else if(value ==LOW){
			clrBit(PORTD,pinNum);
		}
		break;
			default:
			return DIO_WRONG_PORT_NUMBER;
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	08 95       	ret
	}
	return DIO_OK;
 654:	83 e0       	ldi	r24, 0x03	; 3
 656:	08 95       	ret
 658:	83 e0       	ldi	r24, 0x03	; 3
 65a:	08 95       	ret
 65c:	83 e0       	ldi	r24, 0x03	; 3
 65e:	08 95       	ret
 660:	83 e0       	ldi	r24, 0x03	; 3
}
 662:	08 95       	ret

00000664 <dioToggle>:

EN_DIO_error_t  dioToggle( unsigned char portNum ,unsigned char pinNum)
{
	if (pinNum>7){
 664:	68 30       	cpi	r22, 0x08	; 8
 666:	d8 f5       	brcc	.+118    	; 0x6de <dioToggle+0x7a>
		return DIO_WRONG_PIN_NUMBER;
	}
	switch(portNum){
 668:	82 34       	cpi	r24, 0x42	; 66
 66a:	a9 f0       	breq	.+42     	; 0x696 <dioToggle+0x32>
 66c:	18 f4       	brcc	.+6      	; 0x674 <dioToggle+0x10>
 66e:	81 34       	cpi	r24, 0x41	; 65
 670:	31 f0       	breq	.+12     	; 0x67e <dioToggle+0x1a>
 672:	37 c0       	rjmp	.+110    	; 0x6e2 <dioToggle+0x7e>
 674:	83 34       	cpi	r24, 0x43	; 67
 676:	d9 f0       	breq	.+54     	; 0x6ae <dioToggle+0x4a>
 678:	84 34       	cpi	r24, 0x44	; 68
 67a:	29 f1       	breq	.+74     	; 0x6c6 <dioToggle+0x62>
 67c:	32 c0       	rjmp	.+100    	; 0x6e2 <dioToggle+0x7e>
		case PORT_A :
		toggleBit(PORTA,pinNum);
 67e:	2b b3       	in	r18, 0x1b	; 27
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	02 c0       	rjmp	.+4      	; 0x68a <dioToggle+0x26>
 686:	88 0f       	add	r24, r24
 688:	99 1f       	adc	r25, r25
 68a:	6a 95       	dec	r22
 68c:	e2 f7       	brpl	.-8      	; 0x686 <dioToggle+0x22>
 68e:	82 27       	eor	r24, r18
 690:	8b bb       	out	0x1b, r24	; 27
		toggleBit(PORTD,pinNum);
		
		break;
		default: return DIO_WRONG_PORT_NUMBER;
	}
	return DIO_OK;
 692:	83 e0       	ldi	r24, 0x03	; 3
	}
	switch(portNum){
		case PORT_A :
		toggleBit(PORTA,pinNum);
		
		break;
 694:	08 95       	ret
		case PORT_B :
		toggleBit(PORTB,pinNum);
 696:	28 b3       	in	r18, 0x18	; 24
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	02 c0       	rjmp	.+4      	; 0x6a2 <dioToggle+0x3e>
 69e:	88 0f       	add	r24, r24
 6a0:	99 1f       	adc	r25, r25
 6a2:	6a 95       	dec	r22
 6a4:	e2 f7       	brpl	.-8      	; 0x69e <dioToggle+0x3a>
 6a6:	82 27       	eor	r24, r18
 6a8:	88 bb       	out	0x18, r24	; 24
		toggleBit(PORTD,pinNum);
		
		break;
		default: return DIO_WRONG_PORT_NUMBER;
	}
	return DIO_OK;
 6aa:	83 e0       	ldi	r24, 0x03	; 3
		
		break;
		case PORT_B :
		toggleBit(PORTB,pinNum);
		
		break;
 6ac:	08 95       	ret
		case PORT_C :
		toggleBit(PORTC,pinNum);
 6ae:	25 b3       	in	r18, 0x15	; 21
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	02 c0       	rjmp	.+4      	; 0x6ba <dioToggle+0x56>
 6b6:	88 0f       	add	r24, r24
 6b8:	99 1f       	adc	r25, r25
 6ba:	6a 95       	dec	r22
 6bc:	e2 f7       	brpl	.-8      	; 0x6b6 <dioToggle+0x52>
 6be:	82 27       	eor	r24, r18
 6c0:	85 bb       	out	0x15, r24	; 21
		toggleBit(PORTD,pinNum);
		
		break;
		default: return DIO_WRONG_PORT_NUMBER;
	}
	return DIO_OK;
 6c2:	83 e0       	ldi	r24, 0x03	; 3
		
		break;
		case PORT_C :
		toggleBit(PORTC,pinNum);
		
		break;
 6c4:	08 95       	ret
		case PORT_D :
		toggleBit(PORTD,pinNum);
 6c6:	22 b3       	in	r18, 0x12	; 18
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <dioToggle+0x6e>
 6ce:	88 0f       	add	r24, r24
 6d0:	99 1f       	adc	r25, r25
 6d2:	6a 95       	dec	r22
 6d4:	e2 f7       	brpl	.-8      	; 0x6ce <dioToggle+0x6a>
 6d6:	82 27       	eor	r24, r18
 6d8:	82 bb       	out	0x12, r24	; 18
		
		break;
		default: return DIO_WRONG_PORT_NUMBER;
	}
	return DIO_OK;
 6da:	83 e0       	ldi	r24, 0x03	; 3
		
		break;
		case PORT_D :
		toggleBit(PORTD,pinNum);
		
		break;
 6dc:	08 95       	ret
}

EN_DIO_error_t  dioToggle( unsigned char portNum ,unsigned char pinNum)
{
	if (pinNum>7){
		return DIO_WRONG_PIN_NUMBER;
 6de:	80 e0       	ldi	r24, 0x00	; 0
 6e0:	08 95       	ret
		break;
		case PORT_D :
		toggleBit(PORTD,pinNum);
		
		break;
		default: return DIO_WRONG_PORT_NUMBER;
 6e2:	81 e0       	ldi	r24, 0x01	; 1
	}
	return DIO_OK;
}
 6e4:	08 95       	ret

000006e6 <dioRead>:

EN_DIO_error_t dioRead( unsigned char portNum ,unsigned char pinNum, unsigned char *value){
	
	if (pinNum>7){
 6e6:	68 30       	cpi	r22, 0x08	; 8
 6e8:	08 f0       	brcs	.+2      	; 0x6ec <dioRead+0x6>
 6ea:	68 c0       	rjmp	.+208    	; 0x7bc <dioRead+0xd6>
		return DIO_WRONG_PIN_NUMBER;
	}
	
	switch (portNum){
 6ec:	82 34       	cpi	r24, 0x42	; 66
 6ee:	09 f1       	breq	.+66     	; 0x732 <dioRead+0x4c>
 6f0:	18 f4       	brcc	.+6      	; 0x6f8 <dioRead+0x12>
 6f2:	81 34       	cpi	r24, 0x41	; 65
 6f4:	39 f0       	breq	.+14     	; 0x704 <dioRead+0x1e>
 6f6:	64 c0       	rjmp	.+200    	; 0x7c0 <dioRead+0xda>
 6f8:	83 34       	cpi	r24, 0x43	; 67
 6fa:	91 f1       	breq	.+100    	; 0x760 <dioRead+0x7a>
 6fc:	84 34       	cpi	r24, 0x44	; 68
 6fe:	09 f4       	brne	.+2      	; 0x702 <dioRead+0x1c>
 700:	46 c0       	rjmp	.+140    	; 0x78e <dioRead+0xa8>
 702:	5e c0       	rjmp	.+188    	; 0x7c0 <dioRead+0xda>
		case PORT_A:
		*value = readBit(PINA,pinNum);
 704:	79 b3       	in	r23, 0x19	; 25
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	9c 01       	movw	r18, r24
 70c:	06 2e       	mov	r0, r22
 70e:	02 c0       	rjmp	.+4      	; 0x714 <dioRead+0x2e>
 710:	22 0f       	add	r18, r18
 712:	33 1f       	adc	r19, r19
 714:	0a 94       	dec	r0
 716:	e2 f7       	brpl	.-8      	; 0x710 <dioRead+0x2a>
 718:	87 2f       	mov	r24, r23
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	82 23       	and	r24, r18
 71e:	93 23       	and	r25, r19
 720:	02 c0       	rjmp	.+4      	; 0x726 <dioRead+0x40>
 722:	95 95       	asr	r25
 724:	87 95       	ror	r24
 726:	6a 95       	dec	r22
 728:	e2 f7       	brpl	.-8      	; 0x722 <dioRead+0x3c>
 72a:	fa 01       	movw	r30, r20
 72c:	80 83       	st	Z, r24
		
		break;
		default:
		return DIO_WRONG_PORT_NUMBER;
	}
	return DIO_OK;
 72e:	83 e0       	ldi	r24, 0x03	; 3
	
	switch (portNum){
		case PORT_A:
		*value = readBit(PINA,pinNum);
		
		break;
 730:	08 95       	ret
		case PORT_B:
		*value = readBit(PINB,pinNum);
 732:	76 b3       	in	r23, 0x16	; 22
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	9c 01       	movw	r18, r24
 73a:	06 2e       	mov	r0, r22
 73c:	02 c0       	rjmp	.+4      	; 0x742 <dioRead+0x5c>
 73e:	22 0f       	add	r18, r18
 740:	33 1f       	adc	r19, r19
 742:	0a 94       	dec	r0
 744:	e2 f7       	brpl	.-8      	; 0x73e <dioRead+0x58>
 746:	87 2f       	mov	r24, r23
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	82 23       	and	r24, r18
 74c:	93 23       	and	r25, r19
 74e:	02 c0       	rjmp	.+4      	; 0x754 <dioRead+0x6e>
 750:	95 95       	asr	r25
 752:	87 95       	ror	r24
 754:	6a 95       	dec	r22
 756:	e2 f7       	brpl	.-8      	; 0x750 <dioRead+0x6a>
 758:	fa 01       	movw	r30, r20
 75a:	80 83       	st	Z, r24
		
		break;
		default:
		return DIO_WRONG_PORT_NUMBER;
	}
	return DIO_OK;
 75c:	83 e0       	ldi	r24, 0x03	; 3
		
		break;
		case PORT_B:
		*value = readBit(PINB,pinNum);
		
		break;
 75e:	08 95       	ret
		case PORT_C:
		*value = readBit(PINC,pinNum);
 760:	73 b3       	in	r23, 0x13	; 19
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	9c 01       	movw	r18, r24
 768:	06 2e       	mov	r0, r22
 76a:	02 c0       	rjmp	.+4      	; 0x770 <dioRead+0x8a>
 76c:	22 0f       	add	r18, r18
 76e:	33 1f       	adc	r19, r19
 770:	0a 94       	dec	r0
 772:	e2 f7       	brpl	.-8      	; 0x76c <dioRead+0x86>
 774:	87 2f       	mov	r24, r23
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	82 23       	and	r24, r18
 77a:	93 23       	and	r25, r19
 77c:	02 c0       	rjmp	.+4      	; 0x782 <dioRead+0x9c>
 77e:	95 95       	asr	r25
 780:	87 95       	ror	r24
 782:	6a 95       	dec	r22
 784:	e2 f7       	brpl	.-8      	; 0x77e <dioRead+0x98>
 786:	fa 01       	movw	r30, r20
 788:	80 83       	st	Z, r24
		
		break;
		default:
		return DIO_WRONG_PORT_NUMBER;
	}
	return DIO_OK;
 78a:	83 e0       	ldi	r24, 0x03	; 3
		
		break;
		case PORT_C:
		*value = readBit(PINC,pinNum);
		
		break;
 78c:	08 95       	ret
		case PORT_D:
		*value = readBit(PIND,pinNum);
 78e:	70 b3       	in	r23, 0x10	; 16
 790:	81 e0       	ldi	r24, 0x01	; 1
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	9c 01       	movw	r18, r24
 796:	06 2e       	mov	r0, r22
 798:	02 c0       	rjmp	.+4      	; 0x79e <dioRead+0xb8>
 79a:	22 0f       	add	r18, r18
 79c:	33 1f       	adc	r19, r19
 79e:	0a 94       	dec	r0
 7a0:	e2 f7       	brpl	.-8      	; 0x79a <dioRead+0xb4>
 7a2:	87 2f       	mov	r24, r23
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	82 23       	and	r24, r18
 7a8:	93 23       	and	r25, r19
 7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <dioRead+0xca>
 7ac:	95 95       	asr	r25
 7ae:	87 95       	ror	r24
 7b0:	6a 95       	dec	r22
 7b2:	e2 f7       	brpl	.-8      	; 0x7ac <dioRead+0xc6>
 7b4:	fa 01       	movw	r30, r20
 7b6:	80 83       	st	Z, r24
		
		break;
		default:
		return DIO_WRONG_PORT_NUMBER;
	}
	return DIO_OK;
 7b8:	83 e0       	ldi	r24, 0x03	; 3
		
		break;
		case PORT_D:
		*value = readBit(PIND,pinNum);
		
		break;
 7ba:	08 95       	ret
}

EN_DIO_error_t dioRead( unsigned char portNum ,unsigned char pinNum, unsigned char *value){
	
	if (pinNum>7){
		return DIO_WRONG_PIN_NUMBER;
 7bc:	80 e0       	ldi	r24, 0x00	; 0
 7be:	08 95       	ret
		case PORT_D:
		*value = readBit(PIND,pinNum);
		
		break;
		default:
		return DIO_WRONG_PORT_NUMBER;
 7c0:	81 e0       	ldi	r24, 0x01	; 1
	}
	return DIO_OK;
 7c2:	08 95       	ret

000007c4 <interruptInit>:
#include "../../HAL/Button Driver/button.h"
#include "../../HAL/LED driver/led.h"
#include "interrupt.h"

void interruptInit(void){
	sei();
 7c4:	78 94       	sei
	setBit(MCUCR,0);
 7c6:	85 b7       	in	r24, 0x35	; 53
 7c8:	81 60       	ori	r24, 0x01	; 1
 7ca:	85 bf       	out	0x35, r24	; 53
	setBit(MCUCR,1);
 7cc:	85 b7       	in	r24, 0x35	; 53
 7ce:	82 60       	ori	r24, 0x02	; 2
 7d0:	85 bf       	out	0x35, r24	; 53
	setBit(GICR,6);
 7d2:	8b b7       	in	r24, 0x3b	; 59
 7d4:	80 64       	ori	r24, 0x40	; 64
 7d6:	8b bf       	out	0x3b, r24	; 59
	setBit (SREG ,7);
 7d8:	8f b7       	in	r24, 0x3f	; 63
 7da:	80 68       	ori	r24, 0x80	; 128
 7dc:	8f bf       	out	0x3f, r24	; 63
 7de:	08 95       	ret

000007e0 <timerInit>:
	}
}

void timerStop0()
{
	TCCR0 = 0x00;
 7e0:	13 be       	out	0x33, r1	; 51
 7e2:	12 be       	out	0x32, r1	; 50
 7e4:	81 e0       	ldi	r24, 0x01	; 1
 7e6:	8e bd       	out	0x2e, r24	; 46
 7e8:	08 95       	ret

000007ea <timerStart0>:
 7ea:	80 34       	cpi	r24, 0x40	; 64
 7ec:	91 05       	cpc	r25, r1
 7ee:	b9 f0       	breq	.+46     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 7f0:	30 f4       	brcc	.+12     	; 0x7fe <timerStart0+0x14>
 7f2:	81 30       	cpi	r24, 0x01	; 1
 7f4:	91 05       	cpc	r25, r1
 7f6:	59 f0       	breq	.+22     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7f8:	08 97       	sbiw	r24, 0x08	; 8
 7fa:	69 f0       	breq	.+26     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 7fc:	16 c0       	rjmp	.+44     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 7fe:	81 15       	cp	r24, r1
 800:	21 e0       	ldi	r18, 0x01	; 1
 802:	92 07       	cpc	r25, r18
 804:	a9 f0       	breq	.+42     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 806:	81 15       	cp	r24, r1
 808:	94 40       	sbci	r25, 0x04	; 4
 80a:	b1 f0       	breq	.+44     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 80c:	0e c0       	rjmp	.+28     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 80e:	83 b7       	in	r24, 0x33	; 51
 810:	81 60       	ori	r24, 0x01	; 1
 812:	83 bf       	out	0x33, r24	; 51
 814:	0a c0       	rjmp	.+20     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 816:	83 b7       	in	r24, 0x33	; 51
 818:	82 60       	ori	r24, 0x02	; 2
 81a:	83 bf       	out	0x33, r24	; 51
 81c:	06 c0       	rjmp	.+12     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 81e:	83 b7       	in	r24, 0x33	; 51
 820:	81 60       	ori	r24, 0x01	; 1
 822:	83 bf       	out	0x33, r24	; 51
 824:	83 b7       	in	r24, 0x33	; 51
 826:	82 60       	ori	r24, 0x02	; 2
 828:	83 bf       	out	0x33, r24	; 51
 82a:	20 e0       	ldi	r18, 0x00	; 0
 82c:	30 e0       	ldi	r19, 0x00	; 0
 82e:	13 c0       	rjmp	.+38     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 830:	83 b7       	in	r24, 0x33	; 51
 832:	84 60       	ori	r24, 0x04	; 4
 834:	83 bf       	out	0x33, r24	; 51
 836:	f9 cf       	rjmp	.-14     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 838:	83 b7       	in	r24, 0x33	; 51
 83a:	81 60       	ori	r24, 0x01	; 1
 83c:	83 bf       	out	0x33, r24	; 51
 83e:	83 b7       	in	r24, 0x33	; 51
 840:	84 60       	ori	r24, 0x04	; 4
 842:	83 bf       	out	0x33, r24	; 51
 844:	f2 cf       	rjmp	.-28     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 846:	08 b6       	in	r0, 0x38	; 56
 848:	00 fe       	sbrs	r0, 0
 84a:	fd cf       	rjmp	.-6      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 84c:	88 b7       	in	r24, 0x38	; 56
 84e:	81 60       	ori	r24, 0x01	; 1
 850:	88 bf       	out	0x38, r24	; 56
 852:	2f 5f       	subi	r18, 0xFF	; 255
 854:	3f 4f       	sbci	r19, 0xFF	; 255
 856:	26 17       	cp	r18, r22
 858:	37 07       	cpc	r19, r23
 85a:	a8 f3       	brcs	.-22     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 85c:	08 95       	ret

0000085e <timer0Set>:
}
timerError timer0Set(int x){
	if(x==2000){
 85e:	80 3d       	cpi	r24, 0xD0	; 208
 860:	27 e0       	ldi	r18, 0x07	; 7
 862:	92 07       	cpc	r25, r18
 864:	41 f4       	brne	.+16     	; 0x876 <__stack+0x17>
		timerStart0(256,77);
 866:	6d e4       	ldi	r22, 0x4D	; 77
 868:	70 e0       	ldi	r23, 0x00	; 0
 86a:	80 e0       	ldi	r24, 0x00	; 0
 86c:	91 e0       	ldi	r25, 0x01	; 1
 86e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <timerStart0>
		timerStart0(256,15);
	}
	else{
		return wrongMode;
	}
	return timerok;
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	08 95       	ret
}
timerError timer0Set(int x){
	if(x==2000){
		timerStart0(256,77);
	}
	else if(x==0) {
 876:	89 2b       	or	r24, r25
 878:	41 f4       	brne	.+16     	; 0x88a <__stack+0x2b>
		timerStart0(256,15);
 87a:	6f e0       	ldi	r22, 0x0F	; 15
 87c:	70 e0       	ldi	r23, 0x00	; 0
 87e:	80 e0       	ldi	r24, 0x00	; 0
 880:	91 e0       	ldi	r25, 0x01	; 1
 882:	0e 94 f5 03 	call	0x7ea	; 0x7ea <timerStart0>
	}
	else{
		return wrongMode;
	}
	return timerok;
 886:	81 e0       	ldi	r24, 0x01	; 1
 888:	08 95       	ret
	}
	else if(x==0) {
		timerStart0(256,15);
	}
	else{
		return wrongMode;
 88a:	80 e0       	ldi	r24, 0x00	; 0
	}
	return timerok;
	timerStop0();
}
 88c:	08 95       	ret

0000088e <timer1Set>:
timerError timer1Set(int yellow){
	// here i use prescalar 64 for and 256 for 5 second
	TCCR1B = 0x00;
 88e:	1e bc       	out	0x2e, r1	; 46
	if(yellow==1){
 890:	81 30       	cpi	r24, 0x01	; 1
 892:	91 05       	cpc	r25, r1
 894:	71 f4       	brne	.+28     	; 0x8b2 <timer1Set+0x24>
		TCNT1H = 0xE1;
 896:	81 ee       	ldi	r24, 0xE1	; 225
 898:	8d bd       	out	0x2d, r24	; 45
		TCNT1L = 0x7C;
 89a:	8c e7       	ldi	r24, 0x7C	; 124
 89c:	8c bd       	out	0x2c, r24	; 44
		//make the prescalar of 64
		setBit(TIFR,2);
 89e:	88 b7       	in	r24, 0x38	; 56
 8a0:	84 60       	ori	r24, 0x04	; 4
 8a2:	88 bf       	out	0x38, r24	; 56
		setBit(TCCR1B,1);
 8a4:	8e b5       	in	r24, 0x2e	; 46
 8a6:	82 60       	ori	r24, 0x02	; 2
 8a8:	8e bd       	out	0x2e, r24	; 46
		setBit(TCCR1B,0);
 8aa:	8e b5       	in	r24, 0x2e	; 46
 8ac:	81 60       	ori	r24, 0x01	; 1
 8ae:	8e bd       	out	0x2e, r24	; 46
 8b0:	0c c0       	rjmp	.+24     	; 0x8ca <timer1Set+0x3c>
	}
	else if(yellow==0) {
 8b2:	89 2b       	or	r24, r25
 8b4:	81 f4       	brne	.+32     	; 0x8d6 <timer1Set+0x48>
		//tick = 256/10^6
		//max ticks = 2^16
		// no. of ticks = 5 second / tick
		// initial value = max ticks - no. of ticks needed = B3B5
		TCNT1H =  0xB3;
 8b6:	83 eb       	ldi	r24, 0xB3	; 179
 8b8:	8d bd       	out	0x2d, r24	; 45
		TCNT1L = 0xB5;
 8ba:	85 eb       	ldi	r24, 0xB5	; 181
 8bc:	8c bd       	out	0x2c, r24	; 44
		//make the prescalar of 256
		setBit(TIFR,2);
 8be:	88 b7       	in	r24, 0x38	; 56
 8c0:	84 60       	ori	r24, 0x04	; 4
 8c2:	88 bf       	out	0x38, r24	; 56
		setBit(TCCR1B,2);
 8c4:	8e b5       	in	r24, 0x2e	; 46
 8c6:	84 60       	ori	r24, 0x04	; 4
 8c8:	8e bd       	out	0x2e, r24	; 46
	}
	
	else{
	return wrongMode;
	}
	while ((readBit(TIFR,2)) == 0);
 8ca:	08 b6       	in	r0, 0x38	; 56
 8cc:	02 fe       	sbrs	r0, 2
 8ce:	fd cf       	rjmp	.-6      	; 0x8ca <timer1Set+0x3c>
	//setBit(TIFR,2);

	// stop the timer
	TCCR1B = 0x00;
 8d0:	1e bc       	out	0x2e, r1	; 46
	return timerok;
 8d2:	81 e0       	ldi	r24, 0x01	; 1
 8d4:	08 95       	ret
		setBit(TIFR,2);
		setBit(TCCR1B,2);
	}
	
	else{
	return wrongMode;
 8d6:	80 e0       	ldi	r24, 0x00	; 0
	//setBit(TIFR,2);

	// stop the timer
	TCCR1B = 0x00;
	return timerok;
}
 8d8:	08 95       	ret

000008da <_exit>:
 8da:	f8 94       	cli

000008dc <__stop_program>:
 8dc:	ff cf       	rjmp	.-2      	; 0x8dc <__stop_program>
